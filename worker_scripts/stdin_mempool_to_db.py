import sys
import json
import configparser
import mysql.connector

"""
This script reads the json output generated by `bitcoin-cli getrawmempool True` and writes:
- a dict of <feerate>:<TX count> 
- a list of graph positions where assumed greedy blocks should be displayed 
    - mempool is assumed to be a queue
    - a position of 1000 with 2000 tx in the mempool means that the first greedy block would
      ruffly contain tx2000-tx1000.
    - the estimate is not super precise as blocks are only filled till the next tx-size is 
      to big for the block weight. Coinbase transactions, transaction dependencies and miner
      incentives to include low feerate tx are ignored on purpose.
to a MySQL database.
"""


def connect_to_database(config):
    """ connects to a MySQL database with the connection details defined in config.ini """
    db = mysql.connector.connect(
        host=config['DATABASE']['DBHOST'],
        user=config['DATABASE']['DBUSER'],
        passwd=config['DATABASE']['DBPASSWORD'],
        database=config['DATABASE']['DBNAME']
    )

    return db

def read_from_stdin():
    mempool = ""
    for line in sys.stdin:
        mempool += line.rstrip()
    return mempool

if __name__ == "__main__":

    config = configparser.ConfigParser()
    config.read('config.ini')
    db = connect_to_database(config)

    stdin = read_from_stdin()
    mempool = json.loads(stdin)

    feerates_count = {}
    mempoolSize = 0# mempool size in bytes
    memlist = [] # mempool simplified as list/queue of tx
    position_of_greedy_blocks = []

    for txid in mempool:
        tx = mempool[txid]
        mempoolSize += tx['size']
        feerate = float(tx['fee']) * 100000000 / float(tx['size'])
        feerate_int = int(round(feerate))

        memlist.append((feerate, tx['size']))

        if feerate_int not in feerates_count:
            feerates_count[feerate_int] = 0
        feerates_count[feerate_int] += 1

    memlist_position = len(memlist)
    block_size = 0
    for tx in sorted(memlist, reverse=True):
        if block_size + tx[1] < 1000000:
            block_size += tx[1]
            memlist_position -= 1
        else:
            position_of_greedy_blocks.append(memlist_position)
            block_size = 0

    cursor = db.cursor()
    sql = "UPDATE current_mempool SET byCount = %s, positionsInGreedyBlocks = %s, timestamp = UTC_TIMESTAMP, mempoolSize = %s WHERE id = 1"
    val = (json.dumps(feerates_count), json.dumps(position_of_greedy_blocks), mempoolSize)
    cursor.execute(sql, val)
    cursor.close()
    db.commit()
    db.close()
